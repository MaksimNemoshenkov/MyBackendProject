#ingredient sql
ingredient.insert=INSERT INTO INGREDIENT (title, description, category, image_id, is_active, measurement) VALUES (?, ?, ?, ?, ?, ?) RETURNING id
ingredient.select=SELECT id, title, description, category, image_id, is_active, measurement FROM INGREDIENT WHERE id = ? and is_active = true
ingredient.update=UPDATE INGREDIENT SET title = ?, description = ?, category = ?, image_id = ?, is_active = ?, measurement = ? WHERE id = ?
ingredient.delete=UPDATE INGREDIENT SET is_active = false WHERE id = ?
ingredient.select_page=SELECT id, title, description, category, image_id, is_active, measurement FROM INGREDIENT WHERE is_active = true ORDER BY id ASC LIMIT ? OFFSET ?
ingredient.select_search_page_order_by_id=SELECT id, title, description, category, image_id, is_active, measurement FROM INGREDIENT WHERE is_active = true and title iLIKE CONCAT('%', ?, '%') AND category iLIKE CONCAT('%', ?, '%') ORDER BY id ASC LIMIT ? OFFSET ?
ingredient.select_search_page_order_by_title=SELECT id, title, description, category, image_id, is_active, measurement FROM INGREDIENT WHERE is_active = true and title iLIKE CONCAT('%', ?, '%') AND category iLIKE CONCAT('%', ?, '%') ORDER BY title ASC LIMIT ? OFFSET ?
ingredient.select_search_page_order_by_category=SELECT id, title, description, category, image_id, is_active, measurement FROM INGREDIENT WHERE is_active = true and title iLIKE CONCAT('%', ?, '%') AND category iLIKE CONCAT('%', ?, '%') ORDER BY category ASC LIMIT ? OFFSET ?

#kitchenware sql
kitchenware.insert=INSERT INTO KITCHENWARE (title, description, category, image_id, is_active) VALUES (?, ?, ?, ?, ?) RETURNING id
kitchenware.select=SELECT id, title, description, category, image_id, is_active FROM KITCHENWARE WHERE id = ? and is_active = true
kitchenware.update=UPDATE KITCHENWARE SET title = ?, description = ?, category = ?, image_id = ?, is_active = ? WHERE id = ?
kitchenware.delete=UPDATE KITCHENWARE SET is_active = false WHERE id = ?
kitchenware.select_page=SELECT id, title, description, category, image_id, is_active FROM KITCHENWARE WHERE is_active = true ORDER BY id ASC LIMIT ? OFFSET ?
kitchenware.select_search_page_order_by_id=SELECT id, title, description, category, image_id, is_active FROM KITCHENWARE WHERE is_active = true and title iLIKE CONCAT('%', ?, '%') AND category iLIKE CONCAT('%', ?, '%') ORDER BY id ASC LIMIT ? OFFSET ?
kitchenware.select_search_page_order_by_title=SELECT id, title, description, category, image_id, is_active FROM KITCHENWARE WHERE is_active = true and title iLIKE CONCAT('%', ?, '%') AND category iLIKE CONCAT('%', ?, '%') ORDER BY title ASC LIMIT ? OFFSET ?
kitchenware.select_search_page_order_by_category=SELECT id, title, description, category, image_id, is_active FROM KITCHENWARE WHERE is_active = true and title iLIKE CONCAT('%', ?, '%') AND category iLIKE CONCAT('%', ?, '%') ORDER BY category ASC LIMIT ? OFFSET ?

#user sql
user.select_all_from_client=SELECT id, password, first_name, last_name, email, timestamp, image_id, status, role FROM CLIENT
user.select_by_id=SELECT id, password, first_name, last_name, email, timestamp, image_id, status, role FROM CLIENT WHERE ID = ?
user.select_by_email=SELECT id, password, first_name, last_name, email, timestamp, image_id, status, role FROM CLIENT WHERE email = ?
user.select_by_name=SELECT id, password, first_name, last_name, email, timestamp, image_id, status, role FROM CLIENT WHERE name = ?
user.insert_into_client_values=INSERT INTO CLIENT (password, first_name, last_name, email, timestamp, status, role) VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING id
user.update_client=UPDATE CLIENT SET password = ?, first_name = ?, last_name = ?, email = ?, image_id = ? WHERE id = ?
user.delete_client=DELETE FROM CLIENT WHERE ID = ?
user.update_status=UPDATE CLIENT SET status = ? WHERE id = ?
user.update_password=UPDATE CLIENT SET password = ? WHERE id = ?
user.select_page=SELECT id, first_name, last_name, email, timestamp, image_id, status, role FROM CLIENT WHERE ROLE=? ORDER BY id ASC LIMIT ? OFFSET ?

#verify sql
verify.select_by_id=SELECT user_id, verify_code, timestamp FROM VERIFY WHERE user_id = ?
verify.insert=INSERT INTO VERIFY (user_id, verify_code) VALUES (?, ?)
verify.update=UPDATE VERIFY SET verify_code = ? WHERE user_id = ?
verify.delete=DELETE FROM VERIFY WHERE user_id = ?
verify.select_by_code=SELECT user_id, verify_code, timestamp FROM VERIFY WHERE verify_code = ?

#dish sql
dish.dish.create=INSERT INTO DISH (title, description, category, receipt, image_id, is_active) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, title, description, category, receipt, image_id, is_active, likes
dish.dish.edit=UPDATE DISH SET title = ?, description = ?, category = ?, receipt = ?, image_id = ?, is_active = ?, likes = ? WHERE id = ? RETURNING id, title, description, category, receipt, image_id, is_active, likes
dish.dish.delete=DELETE FROM DISH WHERE id = ? RETURNING id, title, description, category, receipt, image_id, is_active
dish.dish.read.page.desc=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes, CASE WHEN favourite.id IS NULL THEN false ELSE true END AS is_favourite FROM DISH LEFT JOIN favourite ON favourite.dish_id=dish.id AND favourite.user_id = ? ORDER BY title DESC LIMIT ? OFFSET ?
dish.dish.read.page.asc=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes, CASE WHEN favourite.id IS NULL THEN false ELSE true END AS is_favourite FROM DISH LEFT JOIN favourite ON favourite.dish_id=dish.id AND favourite.user_id = ? ORDER BY title ASC LIMIT ? OFFSET ?
dish.dish.read.params.desc=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes, CASE WHEN favourite.id IS NULL THEN false ELSE true END AS is_favourite FROM DISH LEFT JOIN favourite ON favourite.dish_id=dish.id AND favourite.user_id = ? WHERE UPPER(title) LIKE UPPER(?) and UPPER(category) LIKE UPPER(?) ORDER BY title DESC LIMIT ? OFFSET ?
dish.dish.read.params.asc=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes, CASE WHEN favourite.id IS NULL THEN false ELSE true END AS is_favourite FROM DISH LEFT JOIN favourite ON favourite.dish_id=dish.id AND favourite.user_id = ? WHERE UPPER(title) LIKE UPPER(?) and UPPER(category) LIKE UPPER(?) ORDER BY title ASC LIMIT ? OFFSET ?
dish.dish.set.active=UPDATE DISH SET is_active = ? WHERE id = ?
dish.dish.solo.read=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes,  CASE WHEN favourite.id IS NULL THEN false ELSE true END AS is_favourite FROM DISH LEFT JOIN favourite ON favourite.dish_id=dish.id AND favourite.user_id = ? WHERE dish.id = ?
dish.dish.recommend=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes, count.count, CASE WHEN favourite.id IS NULL THEN false ELSE true END AS is_favourite FROM ( SELECT dish_ingredient.dish_id, count(dish_ingredient.dish_id) AS count FROM dish_ingredient INNER JOIN stock ON dish_ingredient.dish_id=stock.ingredient_id WHERE stock.user_id = ? GROUP BY dish_ingredient.dish_id ORDER BY count DESC LIMIT ? OFFSET ? ) AS count, dish LEFT JOIN favourite ON favourite.dish_id=dish.id AND favourite.user_id = ? WHERE dish.id=count.dish_id ORDER BY count DESC
dish.dish.with.ingredients.left=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes FROM dish INNER JOIN dish_ingredient ON dish_ingredient.ingredient_id IN (
dish.dish.with.ingredients.right=) and dish.id=dish_ingredient.dish_id GROUP BY dish.id ORDER BY count(dish_ingredient.id) DESC LIMIT ? OFFSET ?
dish.ingredient.check=SELECT id, dish_id, ingredient_id, ingredient_amount FROM DISH_INGREDIENT WHERE dish_id = ? and ingredient_id = ?
dish.ingredient.update=UPDATE DISH_INGREDIENT SET ingredient_amount = ? WHERE id = ? RETURNING id, dish_id, ingredient_id, ingredient_amount
dish.ingredient.remove=DELETE FROM DISH_INGREDIENT WHERE id = ? RETURNING id, dish_id, ingredient_id, ingredient_amount
dish.ingredient.create=INSERT INTO DISH_INGREDIENT (dish_id, ingredient_id, ingredient_amount) VALUES (?, ?, ?) RETURNING id, dish_id, ingredient_id, ingredient_amount
dish.ingredient.read=SELECT ingredient.id, ingredient.title, ingredient.description, ingredient.category, ingredient.image_id, ingredient.is_active, ingredient.measurement FROM ingredient LEFT JOIN dish_ingredient ON ingredient.id=dish_ingredient.ingredient_id WHERE dish_id=?
dish.kitchenware.check=SELECT id, dish_id, kitchenware_id FROM DISH_KITCHENWARE WHERE dish_id = ? and kitchenware_id = ?
dish.kitchenware.remove=DELETE FROM DISH_KITCHENWARE WHERE id = ? RETURNING id, dish_id, kitchenware_id
dish.kitchenware.create=INSERT INTO DISH_KITCHENWARE (dish_id, kitchenware_id) VALUES (?, ?) RETURNING id, dish_id, kitchenware_id
dish.kitchenware.read=SELECT kitchenware.id, kitchenware.title, kitchenware.description, kitchenware.category, kitchenware.image_id, kitchenware.is_active FROM kitchenware LEFT JOIN dish_kitchenware ON kitchenware.id=dish_kitchenware.kitchenware_id WHERE dish_id = ?
dish.comment.read=SELECT comment.id AS id, client.id AS user_id, client.first_name, client.last_name, client.image_id, comment.text, comment.timestamp FROM comment LEFT OUTER JOIN client ON client.id = comment.user_id WHERE comment.dish_id = ? ORDER BY comment.timestamp DESC
dish.comment.create.check=SELECT id, user_id, dish_id, text, timestamp FROM COMMENT WHERE user_id = ? and dish_id = ?
dish.comment.create=INSERT INTO COMMENT (user_id, dish_id, text) VALUES (?, ?, ?) RETURNING id, user_id, dish_id, text, timestamp
dish.comment.delete=DELETE FROM COMMENT WHERE id = ? and user_id = ?  RETURNING id, user_id, dish_id, text, timestamp
dish.favourite.check=SELECT id, user_id, dish_id FROM FAVOURITE WHERE user_id = ? and dish_id = ?
dish.favourite.add=INSERT INTO FAVOURITE (user_id, dish_id) VALUES (?, ?) RETURNING id, user_id, dish_id
dish.favourite.remove=DELETE FROM FAVOURITE WHERE id = ? and user_id = ? RETURNING id, user_id, dish_id
dish.favourite.get=SELECT dish.id, dish.title, dish.description, dish.category, dish.receipt, dish.image_id, dish.is_active, dish.likes, CASE WHEN fav.id IS NULL THEN false ELSE true END AS is_favourite FROM DISH, (SELECT favourite.* FROM favourite WHERE favourite.user_id = ?) AS fav WHERE dish.id=fav.dish_id
dish.label.read.relation=SELECT label.id, label.title FROM label LEFT JOIN dish_label ON label.id=dish_label.label_id WHERE dish_label.dish_id = ?
dish.label.create=INSERT INTO label (title) VALUES (?) RETURNING id, title
dish.label.get=SELECT id, title FROM label LIMIT ? OFFSET ?
dish.label.edit=UPDATE label SET title = ? WHERE id = ? RETURNING id, title
dish.label.delete=DELETE FROM label WHERE id = ? RETURNING id, title
dish.label.add=INSERT INTO dish_label (dish_id, label_id) VALUES (?, ?) RETURNING id, dish_id, label_id
dish.label.remove=DELETE FROM dish_label WHERE id = ? RETURNING id, dish_id, label_id
dish.like.set.like=UPDATE DISH SET likes = likes+1 WHERE dish.id = ? RETURNING id, title, description, category, receipt, image_id, is_active, likes

#user_stock sql
user_stock.select=SELECT stock.id id, user_id, amount, ingredient_id, title, description, category, image_id, is_active, measurement FROM stock JOIN ingredient ON stock.ingredient_id = ingredient.id WHERE user_id = ? LIMIT ? OFFSET ?
user_stock.delete=DELETE FROM STOCK WHERE user_id = ? AND ingredient_id = ?
user_stock.select_ingredient_id=SELECT id FROM INGREDIENT WHERE title iLIKE ? LIMIT 1
user_stock.insert=INSERT INTO stock(user_id, ingredient_id, amount) VALUES (?, ?, ?) 
user_stock.select_by_userid_and_ingredientid=SELECT stock.id id, user_id, amount, ingredient_id, title, description, category, image_id, is_active, measurement FROM stock JOIN ingredient ON stock.ingredient_id = ingredient.id WHERE user_id = ? AND ingredient_id = ?
user_stock.update_by_userid_and_ingredientid=UPDATE stock SET amount = ? WHERE user_id = ? AND ingredient_id = ?
user_stock.select_ingredients_not_present_in_stock=SELECT id, title, description, category, image_id, is_active, measurement FROM ingredient WHERE id NOT IN (SELECT ingredient_id FROM stock WHERE user_id = ?) LIMIT ? OFFSET ?
#friend sql
friend.insert=INSERT INTO FRIEND (sender_id, recipient_id, status, timestamp) VALUES (?, ?, ?, ?)
friend.update_status=UPDATE FRIEND SET status = ? WHERE id = ?
friend.delete=DELETE FROM FRIEND WHERE ID = ?
friend.select_friend_id=WITH fr AS (SELECT id, recipient_id AS friend_id, status FROM friend WHERE sender_id = ? UNION SELECT id, sender_id, status FROM friend WHERE recipient_id = ? ORDER BY friend_id) SELECT fr.id, c.first_name, c.image_id FROM fr JOIN client c ON fr.friend_id = c.id WHERE fr.status = ? LIMIT ? OFFSET ?
friend.select_request=SELECT fr.id, c.first_name, c.image_id FROM friend fr JOIN client c ON fr.sender_id = c.id WHERE fr.status = ? AND recipient_id = ? LIMIT ? OFFSET ?
